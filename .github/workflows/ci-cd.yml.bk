name: build push and deploy image
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read # to checkout code
  id-token: write # to assume role in AWS

env:
  AWS_REGION: us-east-1
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  AWS_ACTION_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URI: ${{ steps.build-and-push.outputs.IMAGE_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ACTION_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag image
        id: build-and-push
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .
          echo "IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Scan Docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}"
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"

      - name: Push image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ACTION_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new ECR image
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          jq --arg IMAGE_URI "${{ needs.build.outputs.IMAGE_URI }}" \
            '.containerDefinitions[0].image = $IMAGE_URI |
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)' \
            task-definition.json > register-task-definition.json

      - name: Register new task definition
        id: register-task
        run: |
          aws ecs register-task-definition --cli-input-json file://register-task-definition.json > register-task-output.json
          NEW_TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' register-task-output.json)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.NEW_TASK_DEF_ARN }} \
            --force-new-deployment
